color = "#74dff2", size = 2, shape = 21, fill = "#74dff2") +
# 添加監測站名稱標籤
# geom_text(data = pivot_data, aes(x = twd97lon, y = twd97lat, label = station),
#           color = "#95edd7", size = 3, vjust = -1) +
# 色彩標度與主題
scale_fill_viridis_c() +
labs(
title = "PM10 pred",
x = "long",
y = "lat",
fill = "PM10"
) +
coord_sf(
xlim = range(slice_27$twd97lon),
ylim = range(slice_27$twd97lat)
)
pr
pr@time
pr@time == "2024-02-27"
slice_27
library(sf)
library(tmap)
Census.Data <-read.csv("Data/practical_data.csv")
Output.Areas <- st_read("Data/Camden_oa11/Camden_oa11.shp")%>%st_as_sf()
OA.Census <- merge(Output.Areas, Census.Data, by.x="OA11CD", by.y="OA")
House.Points <- st_read("Data/Camden_house_sales/Camden_house_sales.shp")%>%as("Spatial")
tm_shape(OA.Census) +
tm_fill("Qualification", palette = "Reds", style = "quantile", title = "% with a Qualification") +
tm_borders(alpha=.4)
# 空間自相關套件
library(spdep)
# 找出鄰近的資料點
neighbours <- poly2nb(OA.Census, queen = TRUE)
# Calculate the Rook's case neighbours
neighbours2 <- poly2nb(OA.Census, queen = FALSE)
coords <- st_coordinates(st_centroid(OA.Census))
par(mfrow=c(1,3))
plot(OA.Census, border = 'lightgrey')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(neighbours, coords, add=TRUE, col='red')
# compares different types of neighbours
plot(OA.Census, border = 'lightgrey')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(neighbours, coords, add=TRUE, col='red')
plot(neighbours2, coords, add=TRUE, col='blue')
par(mfrow=c(1,1))
# global spatial autocorrelation
moran.test(OA.Census$Qualification, listw)
# Convert the neighbour data to a listw object
listw <- nb2listw(neighbours2, style="W")
listw
# global spatial autocorrelation
moran.test(OA.Census$Qualification, listw)
# creates a moran plot
moran <- moran.plot(OA.Census$Qualification, listw = listw)
# creates a local moran output
# 找出polygon內的局部maran index
local <- localmoran(x = OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
nb2listw(neighbours2, style = "W")
y = nb2listw(neighbours2, style = "W")
x <- OA.Census$Qualification
ggplot() + geom_point(aes(x = x, y = lag.listw(y, x)), size = 2) + geom_smooth(aes(x = x, y = lag.listw(y, x)), method = "lm", se = FALSE) + labs(x = "Qualification", y = "Spatial Lag of Qualification") + theme_minimal()
library(ggplot2)
ggplot() + geom_point(aes(x = x, y = lag.listw(y, x)), size = 2) + geom_smooth(aes(x = x, y = lag.listw(y, x)), method = "lm", se = FALSE) + labs(x = "Qualification", y = "Spatial Lag of Qualification") + theme_minimal()
# creates a local moran output
# 找出polygon內的局部maran index
local <- localmoran(x = OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
# maps the results
tm_shape(moran.map) + tm_fill(col = "Ii", style = "quantile", title = "local moran statistic")
# binds results to our polygon shapefile
# 合併人口資質以及該地區的局部moran index
moran.map <- cbind(OA.Census, local)
# maps the results
tm_shape(moran.map) + tm_fill(col = "Ii", style = "quantile", title = "local moran statistic")
# creates a moran plot
moran <- moran.plot(OA.Census$Qualification, listw = listw)
# creates a local moran output
# 找出polygon內的局部maran index
local <- localmoran(x = OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
ggplot() + geom_point(aes(x = x, y = listw, size = 2) +
ggplot() + geom_point(aes(x = x, y = listw, size = 2)) +
geom_smooth(aes(x = x, y = listw), method = "lm", se = FALSE) +
labs(x = "Qualification", y = "Spatial Lag of Qualification") +
theme_minimal()
)
ggplot() + geom_point(aes(x = x, y = listw, size = 2)) +
geom_smooth(aes(x = x, y = listw), method = "lm", se = FALSE) +
labs(x = "Qualification", y = "Spatial Lag of Qualification") +
theme_minimal()
ggplot() + geom_point(aes(x = x, y = y), size = 2) +
geom_smooth(aes(x = x, y = y),
method = "lm", se = FALSE) +
labs(x = "Qualification", y = "Spatial Lag of Qualification") +
theme_minimal()
# creates a moran plot
moran <- moran.plot(OA.Census$Qualification, listw = listw)
# creates a local moran output
# 找出polygon內的局部maran index
local <- localmoran(x = OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
local
# creates a local moran output
# 找出polygon內的局部maran index
local <- localmoran(x = OA.Census$Qualification, listw = nb2listw(neighbours2, style = "W"))
local
View(local)
# binds results to our polygon shapefile
# 合併人口資質以及該地區的局部moran index
moran.map <- cbind(OA.Census, local)
View(moran.map)
# maps the results
tm_shape(moran.map) + tm_fill(col = "Ii", style = "quantile", title = "local moran statistic")
View(neighbours2)
View(OA.Census)
OA.Census$Qualification
mean(OA.Census$Qualification)
local
local[,1]
mean(local[,1])
local
View(local)
### to create LISA cluster map ###
# Local Indicators of Spatial Association (LISA) 局部空間自相關
# 先建立佔位符
quadrant <- vector(mode="numeric",length=nrow(local))
# centers the variable of interest around its mean
m.qualification <- OA.Census$Qualification - mean(OA.Census$Qualification)
# centers the local Moran's around the mean
m.local <- local[,1] - mean(local[,1])
# significance threshold
signif <- 0.1
# builds a data quadrant
# 一個判斷全局一個判斷局部
quadrant[m.qualification>0 & m.local>0] <- 4
quadrant[m.qualification<0 & m.local<0] <- 1
quadrant[m.qualification<0 & m.local>0] <- 2
quadrant[m.qualification>0 & m.local<0] <- 3
quadrant[local[,5]>signif] <- 0
# plot in r
brks <- c(0,1,2,3,4)
colors <- c("white","blue",rgb(0,0,1,alpha=0.4),rgb(1,0,0,alpha=0.4),"red")
plot(OA.Census['OA11CD'],border="lightgray",col=colors[findInterval(quadrant,brks,all.inside=FALSE)])
# box()
legend("bottomleft",legend=c("insignificant","low-low","low-high","high-low","high-high"),
fill=colors,bty="n")
# plot the data and neighbours
plot(OA.Census['White_British'], border = 'lightgrey')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(nb, coords, add=TRUE, col = 'green')
## Getis-Ord GI
# creates centroid and joins neighbours within 0 and x units
coords <- st_coordinates(st_centroid(OA.Census))
nb <- dnearneigh(coords,0,400)
# creates listw
nb_lw <- nb2listw(nb, style = 'B')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(nb, coords, add=TRUE, col = 'green')
# compute Getis-Ord Gi statistic
local_g <- localG(OA.Census$Qualification, nb_lw)
local_g <- cbind(OA.Census, as.matrix(local_g))
names(local_g)[6] <- "gstat"
# map the results
tm_shape(local_g) + tm_fill("gstat", palette = "RdBu", style = "pretty") + tm_borders(alpha=.4)
# compute Getis-Ord Gi statistic
local_g <- localG(OA.Census$Qualification, nb_lw)
local_g <- cbind(OA.Census, as.matrix(local_g))
nb <- dnearneigh(coords,0,400)
# creates listw
nb_lw <- nb2listw(nb, style = 'B')
# plot the data and neighbours
plot(OA.Census['White_British'], border = 'lightgrey')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(nb, coords, add=TRUE, col = 'green')
# compute Getis-Ord Gi statistic
local_g <- localG(OA.Census$Qualification, nb_lw)
names(local_g)[6] <- "gstat"
# map the results
tm_shape(local_g) + tm_fill("gstat", palette = "RdBu", style = "pretty") + tm_borders(alpha=.4)
## Getis-Ord GI
# creates centroid and joins neighbours within 0 and x units
coords <- st_coordinates(st_centroid(OA.Census))
nb <- dnearneigh(coords,0,400)
# creates listw
nb_lw <- nb2listw(nb, style = 'B')
# plot the data and neighbours
plot(OA.Census['White_British'], border = 'lightgrey')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(nb, coords, add=TRUE, col = 'green')
# compute Getis-Ord Gi statistic
local_g <- localG(OA.Census$Qualification, nb_lw)
local_g <- cbind(OA.Census, as.matrix(local_g))
names(local_g)[6] <- "gstat"
# compute Getis-Ord Gi statistic
local_g <- localG(OA.Census$Qualification, nb_lw)
# creates listw
nb_lw <- nb2listw(nb, style = 'B')
nb <- dnearneigh(coords,0,800)
# creates listw
nb_lw <- nb2listw(nb, style = 'B')
# plot the data and neighbours
plot(OA.Census['White_British'], border = 'lightgrey')
plot(OA.Census$geometry, col = 'lightgrey', border = 'white')
plot(nb, coords, add=TRUE, col = 'green')
# compute Getis-Ord Gi statistic
local_g <- localG(OA.Census$Qualification, nb_lw)
local_g <- cbind(OA.Census, as.matrix(local_g))
names(local_g)[6] <- "gstat"
# map the results
tm_shape(local_g) + tm_fill("gstat", palette = "RdBu", style = "pretty") + tm_borders(alpha=.4)
local_g
library(sf)
library(tmap)
Output.Areas <- st_read("Data/Camden_oa11/Camden_oa11.shp")%>%st_as_sf()
House.Points <- st_read("Data/Camden_house_sales/Camden_house_sales.shp")%>%st_as_sf()#%>%as("Spatial")
library(spatstat)
library(maptools)
# Create a tessellated surface
dat.pp <- as(dirichlet(as.ppp(House.Points)), "SpatialPolygons")
dat.pp <- as(dat.pp,"SpatialPolygons")
# Sets the projection to British National Grid
proj4string(dat.pp) <- CRS("+init=EPSG:27700")
proj4string(House.Points) <- CRS("+init=EPSG:27700")
# define sample grid based on the extent of the House.Points file
grid <-spsample(House.Points, type = 'regular', n = 10000)
idw <- idw(House.Points$Price ~ 1, House.Points, newdata= grid)
idw.output = as.data.frame(idw)
names(idw.output)[1:3] <- c("long", "lat", "prediction")
# create spatial points data frame
spg <- idw.output
idw <- idw(House.Points$Price ~ 1, House.Points, newdata= grid)
House.Points <- st_read("Data/Camden_house_sales/Camden_house_sales.shp")%>%st_as_sf()#%>%as("Spatial")
Output.Areas <- st_read("Data/Camden_oa11/Camden_oa11.shp")%>%st_as_sf()
# Create a tessellated surface
dat.pp <- as(dirichlet(as.ppp(House.Points)), "SpatialPolygons")
dat.pp <- as(dat.pp,"SpatialPolygons")
# Sets the projection to British National Grid
proj4string(dat.pp) <- CRS("+init=EPSG:27700")
proj4string(House.Points) <- CRS("+init=EPSG:27700")
# Assign to each polygon the data from House.Points
int.Z <- over(dat.pp,House.Points, fn=mean) # Create a SpatialPolygonsDataFrame
thiessen <- SpatialPolygonsDataFrame(dat.pp, int.Z)%>%st_as_sf()
# Assign to each polygon the data from House.Points
int.Z <- over(dat.pp,House.Points, fn=mean) # Create a SpatialPolygonsDataFrame
# Create a tessellated surface
dat.pp <- as(dirichlet(as.ppp(House.Points)), "SpatialPolygons")
dat.pp <- as(dat.pp,"SpatialPolygons")
# Sets the projection to British National Grid
proj4string(dat.pp) <- CRS("+init=EPSG:27700")
proj4string(House.Points) <- CRS("+init=EPSG:27700")
# Assign to each polygon the data from House.Points
int.Z <- over(dat.pp,House.Points, fn=mean) # Create a SpatialPolygonsDataFrame
proj4string(House.Points) <- CRS("+init=EPSG:27700")
House.Points <- as(House.Points, "Spatial")
proj4string(House.Points) <- CRS("+init=EPSG:27700")
# Assign to each polygon the data from House.Points
int.Z <- over(dat.pp,House.Points, fn=mean) # Create a SpatialPolygonsDataFrame
thiessen <- SpatialPolygonsDataFrame(dat.pp, int.Z)%>%st_as_sf()
# maps the thiessen polygons and House.Points
House.Points <- House.Points%>%st_as_sf()
tm_shape(Output.Areas) +
tm_fill(fill = "grey", fill_alpha = 0.3) +
tm_shape(thiessen) +
tm_borders(col = "black", fill_alpha = 0.5) +
tm_shape(House.Points) +
tm_dots(col = "blue", scale = 0.5)
library(raster)
# crops the polygon by our output area shapefile
thiessen.crop <- st_intersection(thiessen, Output.Areas)
# maps cropped thiessen polygons and House.Points
tm_shape(Output.Areas) + tm_fill(fill_alpha=.3, col = "grey") +
tm_shape(thiessen.crop) + tm_borders(fill_alpha=.5, col = "black") +
tm_shape(House.Points) + tm_dots(col = "blue", scale = 0.5)
# maps house prices across thiessen polygons
tm_shape(thiessen.crop) +
tm_fill(col = "Price", style = "quantile", palette = "brewer.reds", title = "Price Paid (£)") +
tm_borders(alpha=.3, col = "black") +
tm_shape(House.Points) + tm_dots(col = "black", scale = 0.5) +
tm_layout(legend.position = c("left", "bottom"),
legend.text.size = 1.05, legend.title.size = 1.2, frame = FALSE)
library(gstat)
library(xts)
House.Points <- as(House.Points, "Spatial")
# define sample grid based on the extent of the House.Points file
grid <-spsample(House.Points, type = 'regular', n = 10000)
idw <- idw(House.Points$Price ~ 1, House.Points, newdata= grid)
idw.output = as.data.frame(idw)
names(idw.output)[1:3] <- c("long", "lat", "prediction")
# create spatial points data frame
spg <- idw.output
coordinates(spg) <- ~ long + lat
# coerce to SpatialPixelsDataFrame
gridded(spg) <- TRUE
# coerce to raster
raster_idw <- raster(spg)
# sets projection to British National Grid
projection(raster_idw) <- CRS("+init=EPSG:27700")
# we can quickly plot the raster to check its okay
plot(raster_idw)
persp(raster_idw)
library(tmap)
tm_shape(raster_idw) +
tm_raster("prediction", style = "quantile", n = 100, palette = "brewer.reds", legend.show = FALSE)
tm_shape(raster_idw) +
tm_raster("prediction", style = "quantile", n = 100, palette = "brewer.reds", legend.show = FALSE) +
tm_shape(Output.Areas) + tm_borders(alpha=.5)
tm_shape(raster_idw) +
tm_raster("prediction", style = "quantile", n = 100, palette = "brewer.reds", legend.show = FALSE) +
tm_shape(Output.Areas) + tm_borders(alpha=.5,) +
tm_shape(House.Points) + tm_bubbles(size = "Price", col = "Price",
palette = "brewer.blues", style = "quantile", legend.size.show = FALSE,
title.col = "Price Paid (£)") +
tm_layout(legend.position = c("left", "bottom"),
legend.text.size = 1.1, legend.title.size = 1.4, frame = FALSE,
legend.bg.color = "white", legend.bg.alpha = 0.5)
# plots the masked raster
House.Points <- House.Points%>%st_as_sf()
## Warning: package 'automap' was built under R version 3.3.1 # this is the same grid as before
grid <-spsample(House.Points, type = 'regular', n = 10000)
# plots the masked raster
House.Points <- House.Points%>%st_as_sf()
House.Points <- as(House.Points, "Spatial")
## Warning: package 'automap' was built under R version 3.3.1 # this is the same grid as before
grid <-spsample(House.Points, type = 'regular', n = 10000)
# runs the kriging
kriging_result = autoKrige(log(Price)~1, House.Points, grid)
plot(kriging_result)
install.packages('autoKrige')
install.packages("automap")
library(automap)
House.Points <- as(House.Points, "Spatial")
## Warning: package 'automap' was built under R version 3.3.1 # this is the same grid as before
grid <-spsample(House.Points, type = 'regular', n = 10000)
# runs the kriging
kriging_result = autoKrige(log(Price)~1, House.Points, grid)
# plots the masked raster
House.Points <- House.Points%>%st_as_sf()
library(tidyverse)
# runs the kriging
kriging_result = autoKrige(log(Price)~1, House.Points, grid)
# plots the masked raster
House.Points <- House.Points%>%st_as_sf()
library(sf)
library(tmap)
library(spatstat)
library(maptools)
House.Points <- as(House.Points, "Spatial")
## Warning: package 'automap' was built under R version 3.3.1 # this is the same grid as before
grid <-spsample(House.Points, type = 'regular', n = 10000)
# runs the kriging
kriging_result = autoKrige(log(Price)~1, House.Points, grid)
# plots the masked raster
House.Points <- House.Points%>%st_as_sf()
# runs the kriging
kriging_result = autoKrige(log(Price)~1, House.Points, grid)
grid
House.Points_sf <- na.omit(House.Points_sf)
House.Points <- st_as_sf(House.Points)
House.Points <- SpatialPointsDataFrame(
coords = coordinates(House.Points),   # 提取座標
data = data.frame(ID = seq_len(nrow(coordinates(House.Points)))),  # 添加虛擬屬性
proj4string = CRS(proj4string(House.Points))  # 保留原始投影
)
House.Points <- SpatialPointsDataFrame(
coords = coord(House.Points),   # 提取座標
data = data.frame(ID = seq_len(nrow(coordinates(House.Points)))),  # 添加虛擬屬性
proj4string = CRS(proj4string(House.Points))  # 保留原始投影
)
library(tidyverse)
# https://airtw.moenv.gov.tw/cht/Query/InsValue.aspx
data <- read_csv("Data/taiwan.csv", locale = locale(encoding = "Big5"))
# https://data.moenv.gov.tw/dataset/detail/AQX_P_07
station <- read_csv("Data/station.csv")
data
numeric_cols <- sprintf("%02d", 0:23)
full_data <- data %>%
mutate(across(
all_of(numeric_cols),
~ {
# 將 "#" 替換為 NA，並轉換為數值類型
num_col <- as.numeric(na_if(as.character(.), "#"))
# 計算欄位的平均值（忽略 NA）
col_mean <- mean(num_col, na.rm = TRUE)
# 用平均值替換 NA
replace_na(num_col, col_mean)
}
))
full_data <- full_data %>%  # 將 `#` 替換為 NA 並轉為數字
rowwise() %>%  # 按行操作
mutate(有效平均 = mean(c_across(all_of(numeric_cols)), na.rm = TRUE)) %>% # 計算有效平均
ungroup()%>%
select(`測站`, `日期`, `測項`, `有效平均`)
full_data
full_data <- full_data %>%
mutate(日期 = as.Date(日期, format = "%Y/%m/%d")) %>%
filter(日期 < as.Date("2024-02-29"))
pivot_data <- full_data %>%
pivot_wider(
names_from = 測項,      # 將 `測項` 的值變成欄位名稱
values_from = 有效平均  # 將 `有效平均` 作為欄位值
)
pivot_data$測站%>%unique()
get_station <- station%>%filter(sitename %in% pivot_data$`測站`)
pivot_data <- pivot_data%>%
left_join(get_station, by = c("測站" = "sitename"))%>%
select(`測站`, `日期`, PM10, twd97lon, twd97lat)%>%
mutate(
PM10 = ifelse(is.nan(PM10), 0, PM10),
)
pivot_data
select_lst <- c("基隆", "士林", "大同", "中山",  "古亭", "松山", "陽明",  "萬華", "三重", "土城")
library(sp)
library(spacetime)
# Create a SpatialPoints object
spatial_points <- SpatialPoints(pivot_data[, c("twd97lon", "twd97lat")])
names(pivot_data)[1] <- "station"
names(pivot_data)[2] <- "date"
pivot_data$date <- as.Date(pivot_data$date)
pivot_data <- as.data.frame(pivot_data) # stConstruct 需要 data.frame 格式
STIDF_daily <- stConstruct(
x = pivot_data,
space = c("twd97lon", "twd97lat"),
time = "date",
SpatialObj=spatial_points
)
STFDF_daily <- as(STIDF_daily, "STFDF")
STFDF_daily@sp@proj4string <- CRS("+init=epsg:3826") # 座標系定義
library(showtext)
pivot_data$station%>%unique()
font_add(family = "PingFang", regular = "/System/Library/Fonts/Supplemental/PingFang.ttc")
showtext_auto()
time_range <- "2024-01-01::2024-02-29" # 時間範圍
stplot(
STFDF_daily[, time_range, "PM10"],  # 時間範圍和變量選擇
mode = "xt",                      # xt 模式：時間-站點
scaleX = 0,                       # 去掉 X 軸比例
col.regions = terrain.colors(100), # 顏色梯度
scales = list(
x = list(labels = unique(pivot_data$station))
)
)
stplot(STFDF_daily[, "2024-01-01::2024-01-30" , "PM10"], mode = "ts")
library(rworldmap)
world <- getMap(resolution="low")
library(RColorBrewer)
# stplot(STFDF_daily[, time_range, "PM10"],
#        col.regions=brewer.pal(6,"Spectral"), cuts=6, sp.layout=list(world,first=TRUE))
library(gstat)
# 計算時間、空間半變異數
# cutoff是最大距離，tlags是時間間隔，width是時間窗口
cutoff <- max(spDists(coordinates(STFDF_daily))) / 2
width <- cutoff / 10
var <- variogram(PM10~1, STFDF_daily[!is.na(STFDF_daily[,"2024-01-01::2024-06-30","PM10"]$PM10),
"2024-01-01::2024-06-","PM10"], width=width, cutoff=cutoff)
# 模型設定，vgm內分別是sill, range, nugget, k是乘積係數，控制兩者之間的交互強度
prodSumModel <- vgmST("productSum", space = vgm(1, "Exp", 150, 0.5), time = vgm(1, "Exp", 5, 0.5), k = 5)
# 設定參數下限
pars.l <- c(sill.s = 0, range.s = 10, nugget.s = 0,sill.t = 0, range.t = 1,
nugget.t = 0, sill.st = 0, range.st = 10, nugget.st = 0, anis = 0, k = 0.01)
# 模型擬合
prodSumModel_Vgm <- fit.StVariogram(var, prodSumModel, lower = pars.l)
attr(prodSumModel_Vgm, "MSE")
extractPar(prodSumModel_Vgm)
plot(var, model = prodSumModel_Vgm, main = "Fitted Variogram")
fitted_values <- variogramLine(prodSumModel_Vgm, maxdist = max(var$dist))
time_range <- seq(as.Date("2024-02-25"), as.Date("2024-02-29"), by = "day")  # 最後三天
# 2. 創建空間點
lon_seq <- seq(lon_range[1], lon_range[2], by = 0.05)
lat_seq <- seq(lat_range[1], lat_range[2], by = 0.05)
space_grid <- expand.grid(twd97lon = lon_seq, twd97lat = lat_seq)
space_grid
# 1. 定義時空範圍
lon_range <- range(pivot_data$twd97lon) + c(-0.1, 0.1)
lat_range <- range(pivot_data$twd97lat) + c(-0.1, 0.1)
time_range <- seq(as.Date("2024-02-25"), as.Date("2024-02-29"), by = "day")  # 最後三天
# 2. 創建空間點
lon_seq <- seq(lon_range[1], lon_range[2], by = 0.05)
lat_seq <- seq(lat_range[1], lat_range[2], by = 0.05)
space_grid <- expand.grid(twd97lon = lon_seq, twd97lat = lat_seq)
space_grid
# 創建 SpatialPoints 和 STFDF 對象
spatial_points <- SpatialPoints(space_grid, proj4string = CRS("+init=epsg:3826"))
grid_ST <- STFDF(
sp = spatial_points,
time = time_range,
data = data.frame(PM10 = rep(NA, length(time_range) * nrow(space_grid)))  # 修正行數
)
pr <- krigeST(PM10~1, data=STFDF_daily, modelList=prodSumModel_Vgm, newdata=grid_ST)
stplot(pr)
library(tmap)
library(leaflet)
library(sf)
library(sp)
library(tidyverse)
Census.Data <-read.csv("practical_data.csv")
Output.Areas <- st_read("Data/Camden_oa11/Camden_oa11.shp")
OA.Census <- merge(Output.Areas, Census.Data, by.x="OA11CD", by.y="OA")%>%as("Spatial")
library(tidyverse)
library(tmap)
library(leaflet)
library(sf)
library(sp)
library(raster)
library(adehabitatHR)
Output.Areas <- st_read("Data/Camden_oa11/Camden_oa11.shp")
House.Points <- st_read("Data/Camden_house_sales/Camden_house_sales.shp")%>%as("Spatial")
kde.output <- kernelUD(House.Points, h="href", grid = 1000)
kde.output <- kernelUD(House.Points, h="href", grid = 1000)
plot(kde.output)
House.Points
st_read("Data/Camden_house_sales/Camden_house_sales.shp")
House.Points <- st_read("Data/Camden_house_sales/Camden_house_sales.shp")#%>%as("Spatial")
View(House.Points)
House.Points <- st_read("Data/Camden_house_sales/Camden_house_sales.shp")%>%as("Spatial")
